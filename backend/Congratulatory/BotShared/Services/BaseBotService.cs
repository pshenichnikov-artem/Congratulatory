using ClientInfo.Grpc;
using Microsoft.Extensions.Logging;
using BotShared.Models;

namespace BotShared.Services;

public abstract class BaseBotService : IBotService
{
    protected readonly ClientInfoService.ClientInfoServiceClient _grpcClient;
    protected readonly ILogger _logger;
    protected readonly ApiSettings _apiSettings;

    protected BaseBotService(ClientInfoService.ClientInfoServiceClient grpcClient, ILogger logger, ApiSettings apiSettings)
    {
        _grpcClient = grpcClient;
        _logger = logger;
        _apiSettings = apiSettings;
    }

    public virtual async Task HandleMessageAsync(long chatId, string username, string text, CancellationToken cancellationToken)
    {
        if (!IsValidCommand(text))
            return;

        _logger.LogInformation("–ö–æ–º–∞–Ω–¥–∞ {Command} –æ—Ç {Username} ({ChatId})", text, username, chatId);

        try
        {
            var response = await _grpcClient.SendClientInfoAsync(new BotClientInfo
            {
                ChatId = chatId,
                Username = username,
                Platform = GetPlatformName()
            }, cancellationToken: cancellationToken);

            string replyText = response.Success
                ? "üéâ –ì–æ—Ç–æ–≤–æ! –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å —Ç—ã —Ç–æ—á–Ω–æ –Ω–µ –∑–∞–±—É–¥–µ—à—å –ø—Ä–æ –≤–∞–∂–Ω—ã–µ –¥–Ω–∏ üéÇ"
                : $"‚ùå –ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.\n–£–∫–∞–∂–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–¥–µ—Å—å: {_apiSettings.FrontendUrl}";

            await SendMessageAsync(chatId, replyText, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã");
            await SendMessageAsync(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", cancellationToken);
        }
    }

    public abstract Task SendMessageAsync(long chatId, string text, CancellationToken cancellationToken = default);

    protected abstract string GetPlatformName();

    protected virtual bool IsValidCommand(string text)
    {
        var lowerText = text.ToLower();
        return lowerText == "/start" || lowerText == "/update" || lowerText == "–Ω–∞—á–∞–ª–æ" || lowerText == "–æ–±–Ω–æ–≤–∏—Ç—å";
    }
}