using BirthdayNotificationWorker.Models;
using Grpc.Net.Client;
using NotificationService.Grpc;

namespace BirthdayNotificationWorker.Services;

public class ApiService
{
    private readonly ILogger<ApiService> _logger;
    private readonly string _apiAddress;

    public ApiService(ILogger<ApiService> logger, IConfiguration configuration)
    {
        _logger = logger;
        _apiAddress = configuration.GetConnectionString("ApiAddress") ?? throw new ArgumentNullException("ApiAddress");
    }

    public async Task<List<BirthdayNotificationDto>> GetTodayNotificationsAsync()
    {
        try
        {
            using var channel = GrpcChannel.ForAddress(_apiAddress);
            var client = new NotificationService.Grpc.NotificationService.NotificationServiceClient(channel);
            
            var response = await client.GetTodayNotificationsAsync(new Empty());
            
            return response.Notifications.Select(n => new BirthdayNotificationDto
            {
                Id = n.Id,
                BirthdayPersonName = n.BirthdayPersonName,
                ChatId = n.ChatId,
                Platform = n.Platform,
                RelationshipType = n.RelationshipType,
                MessageText = n.RelationshipType switch
                {
                    "family" => $"üë®‚Äçüë©‚Äçüëß {n.DateOfBirth} —É —Ç–≤–æ–µ–≥–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ {n.BirthdayPersonName} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è üéâ\n–¢–µ–ø–ª—ã–µ —Å–ª–æ–≤–∞ –∏ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–±–æ—Ç—ã —Ç–æ—á–Ω–æ –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è ‚ù§Ô∏è",
                    "friend" => $"üéà –ù–µ –∑–∞–±—É–¥—å, —É —Ç–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ {n.BirthdayPersonName} {n.DateOfBirth} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!\n–ü–æ—Ä–∞–¥—É–π —Ö–æ—Ä–æ—à–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ –ø—Ä–∏—è—Ç–Ω—ã–º —Å—é—Ä–ø—Ä–∏–∑–æ–º üéÅ",
                    "colleague" => $"üíº {n.DateOfBirth} —É —Ç–≤–æ–µ–≥–æ –∫–æ–ª–ª–µ–≥–∏ {n.BirthdayPersonName} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è üéâ\n–ü–æ–∂–µ–ª–∞–π —É–¥–∞—á–∏ –∏ —É—Å–ø–µ—Ö–æ–≤!",
                    _ => $"üéâ {n.DateOfBirth} {n.BirthdayPersonName} –æ—Ç–º–µ—á–∞–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!\n–°–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å ü•≥"
                },
            }).ToList();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ gRPC({_apiAddress})");
            return new List<BirthdayNotificationDto>();
        }
    }

    public async Task MarkNotificationSentAsync(long notificationId)
    {
        try
        {
            using var channel = GrpcChannel.ForAddress(_apiAddress);
            var client = new NotificationService.Grpc.NotificationService.NotificationServiceClient(channel);
            
            await client.MarkNotificationSentAsync(new MarkSentRequest { NotificationId = notificationId });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ");
        }
    }
}